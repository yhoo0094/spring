<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.company.spring.dao.EmpMapper">

<!-- 단건조회  -->
	<select id="getEmp" parameterType="emp" resultType="emp">
		SELECT  
		        employee_id,
		        department_id,
		        salary,
		        first_name,
				last_name,
				email,
				hire_date,
				job_id
		FROM employees
		WHERE employee_id = #{employeeId}
	</select>
	
<!-- 전체조회  -->	
	<select id="getEmpList" resultType="emp">
		SELECT * 
		  FROM employees
		<where>
			<if test="firstName != null and firstName != ''">
				upper(FIRST_NAME) like '%' || upper(#{firstName}) || '%'
			</if>
			<if test="departmentId != null and departmentId != ''">
				AND DEPARTMENT_ID = #{departmentId}
			</if>
			<if test="salary != null">
				<![CDATA[
				AND salary > #{salary}
				]]>
			</if>
			<if test="minSalary != null">
				<![CDATA[
				and salary > #{minSalary} 
				]]> 
			</if>
			<if test="maxSalary != null">
			<![CDATA[
			and salary < #{maxSalary}
			]]> 
			</if>
		</where>
	</select>

<!--  사원등록    -->
	<insert id="insertEmp" parameterType="emp">
		<selectKey order="BEFORE" keyProperty="employeeId" resultType="string">
			select max(employee_id)+1 
			from employees 
		</selectKey>
		INSERT INTO EMPLOYEES (	employee_id, 
								first_name, 
								last_name,
								email,
								hire_date,
								job_id,
								salary
								)
	 	                VALUES(
	 	               			#{employeeId},
	 	               			#{firstName},
	 	               			#{lastName},
	 	               			#{email},
	 	               			#{hireDate},
	 	               			#{jobId},
	 	               			#{salary})
	</insert>
	
<!-- 프로시저를 이용한 사원등록 -->
	<insert id="insertEmpProc" statementType="CALLABLE">
		{call INS_EMP(
			#{lastName},
			#{email},
			#{jobId},
			#{msg, mode=OUT, jdbcType=VARCHAR, javaType=string},
			#{employeeId, mode=OUT, jdbcType=VARCHAR, javaType=string}
		)}
		
	</insert>
	
<!--  사원수정    -->
	<update id="updateEmp">
		update employees
		<set>
			<if test="firstName != null and firstName != ''">
				FIRST_NAME = #{firstName},
			</if>
			<if test="departmentId != null and departmentId != ''">
				DEPARTMENT_ID = #{departmentId},
			</if>
			<if test="salary != null">
				salary = #{salary}
			</if>
		</set>
	</update>
	
<!--삭제 -->
	<delete id="deleteEmp">
		DELETE EMPLOYEES
		WHERE EMPLOYEE_ID = #{employeeId}
	</delete>
	
	<delete id="deleteMultiEmp">
		DELETE EMPLOYEES
		WHERE EMPLOYEE_ID IN
		<foreach collection="list" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</delete>

<!-- 레코드 건수 -->
	<select id="getCount" resultType="int">
		SELECT COUNT(*) FROM EMPLOYEES
		<where>
			<if test="firstName != null and firstName != ''">
				upper(FIRST_NAME) like '%' || upper(#{firstName}) || '%'
			</if>
			<if test="departmentId != null and departmentId != ''">
				AND DEPARTMENT_ID = #{departmentId}
			</if>
			<if test="salary != null">
				<![CDATA[
				AND salary > #{salary}
				]]>
			</if>
			<if test="minSalary != null">
				<![CDATA[
				and salary > #{minSalary} 
				]]> 
			</if>
			<if test="maxSalary != null">
			<![CDATA[
			and salary < #{maxSalary}
			]]> 
			</if>
		</where>
	</select>

<!-- 부서별 사원 수 부서번호, 부서명, 사원수 -->
	<select id="getStatDept" resultType="map">
		select E.department_id "deptId", D.Department_Name "deptName", count(*) over() CNT
		from employees E, departments D
		where E.department_id = D.department_id
		<!-- group by E.department_id, D.Department_Name -->
	</select>
	
<!-- jobId select option -->
	<select id="jobSelect" resultType="co.company.spring.dao.Jobs">
		SELECT JOB_ID, JOB_TITLE
		FROM JOBS
		ORDER BY JOB_ID
	</select>

<!-- departmentId select option -->
	<select id="deptSelect" resultType="co.company.spring.dao.Depts">
		SELECT DEPARTMENT_ID, DEPARTMENT_NAME
		FROM DEPARTMENTS
		ORDER BY DEPARTMENT_ID
	</select>
</mapper>
